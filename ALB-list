provider "aws" {
  region = "ap-northeast-2"   // region 정보
}

variable "vpc_id"{
  default = "vpc-8fefe1e7"   // vpc 정보
}

variable "subnet_id"{
  default = ["subnet-0beb87a0f4b18ea2e", "subnet-02c93f6b5da0a8b54"]              //2개의 public subnet id 
}

 variable "security_group_id" {
   default = ["sg-081b31ea55282e611"] // ALB 에 적용되는 Security Group ID
}

resource "aws_lb" "test_alb-01" {
  name               = "alb-test-01"      // 생성한 ALB 의 이름
  internal           = false
  load_balancer_type = "application"
  security_groups    = var.security_group_id                      //앞의 security gp 리소스 참조 
  subnets            = var.subnet_id
  enable_deletion_protection = false   //true 로 할경우 destroy 가 안됨
}

resource "aws_lb" "test_alb-02" {
  name               = "alb-test-02"   // 생성한 ALB 의 이름
  internal           = false
  load_balancer_type = "application"
  security_groups    = var.security_group_id                      //앞의 security gp 리소스 참조 
  subnets            = var.subnet_id
  enable_deletion_protection = false   //true 로 할경우 destroy 가 안됨
}
resource "aws_lb_listener" "test_alb-01" {
 
  load_balancer_arn = aws_lb.test_alb-01.arn
  port              = "80"
  protocol          = "HTTP"
 
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.test_alb-01.arn                               //lb target gp name 설정
  }
}
resource "aws_lb_listener" "test_alb-01-443" {
 
  load_balancer_arn = aws_lb.test_alb-01.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = "arn:aws:acm:ap-northeast-2:867154655416:certificate/186e5922-d8c5-446a-b189-3119b047f12b"
 
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.test_alb-01.arn                               //lb target gp name 설정
  }
}
resource "aws_lb_listener" "test_alb-02" {
 
  load_balancer_arn = aws_lb.test_alb-02.arn
  port              = "80"
  protocol          = "HTTP"
 
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.test_alb-02.arn                               //lb target gp name 설정
  }
}
resource "aws_lb_listener" "test_alb-02-443" {
 
  load_balancer_arn = aws_lb.test_alb-02.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = "arn:aws:acm:ap-northeast-2:867154655416:certificate/186e5922-d8c5-446a-b189-3119b047f12b"
 
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.test_alb-02.arn                               //lb target gp name 설정
  }
}
resource "aws_lb_target_group" "test_alb-01" {
  name     = "tg-test-01"
  port     = 8081
  protocol = "HTTP"
//  target_type = "instance"
  load_balancing_algorithm_type = "round_robin"
  vpc_id   = var.vpc_id
  
  health_check {
        enabled             = true
        healthy_threshold   = 5
        interval            = 30
        matcher             = "200,302"
        path                = "/"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 2
    }
}
resource "aws_lb_target_group" "test_alb-02" {
  name     = "tg-test-02"
  port     = 8082
  protocol = "HTTP"
//  target_type = "instance"
  load_balancing_algorithm_type = "round_robin"
  vpc_id   = var.vpc_id
  
  health_check {
        enabled             = true
        healthy_threshold   = 5
        interval            = 30
        matcher             = "200,302"
        path                = "/"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 2
    }
}

resource "aws_lb_target_group_attachment" "paloalto-01" {
  count = length(data.aws_instances.test_alb.ids)
  target_group_arn = aws_lb_target_group.test_alb-01.arn
  target_id        = element(data.aws_instances.test_alb.ids, count.index)
  port             = 8081

}
resource "aws_lb_target_group_attachment" "paloalto-02" {
  count = length(data.aws_instances.test_alb.ids)
  target_group_arn = aws_lb_target_group.test_alb-02.arn
  target_id        = element(data.aws_instances.test_alb.ids, count.index)
  port             = 8082

}
data "aws_instances" "test_alb" {                                                     // instance resource의 Data를 가져옴
  instance_tags = {
    Name = "Paloalto_*"
  }
}


// 코드 생성 후 terraform plan 으로 add / change / destroy 되는 부분을 확인
// destroy 가 없는 경우 terrafor apply 실행 
// 이때 target 에 instance 가 initial 됨.
// error 가 발생할 경우 아래 명령어로 error 가 발생한 alb-listener 를 import 후 terraform plan 을 하여 No change 가 발생하도록 수정

//$ terraform import aws_lb_listener.test_alb-02 arn:aws:elasticloadbalancing:ap-northeast-2:867154655416:listener/app/alb-test-02/e3c2ac15b4970d3e/e3ea1ad5e5241e76
